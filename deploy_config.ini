[Paths]
; Specify the source directory containing your Python source files, relative to the project root
SRC_DIRECTORY = src/

; Specify the path to the main program (usually the file that imports and instantiates Robot from Robot.py) relative to the project root
MAIN_PROGRAM_PATH = src/main.py

; Specify the source directory containing any files you would like additionally deployed to the robot.
; For example config files or images, relative to the project root
DEPLOY_DIRECTORY = deploy/

VEXLIB_DIRECTORY = venv/lib/python3.10/site-packages/VEXLib/

POSIX_MOUNT_POINT_DIR = f"{os.path.join(os.sep, 'media', os.getenv('USER'))}"


[Drive]
; Specify the drive identifier string for finding the VEX disk.
; this is the string that the program will search for in the sd card name.
; make sure that none of your other drives have this string in their name or you risk data loss
DRIVE_IDENTIFIER_STRING = VEX

; Specify the maximum number of attempts to find the VEX disk
FIND_VEX_DISK_MAX_ATTEMPTS = 50

; Specify the time between attempts (in seconds) to find the VEX disk
FIND_VEX_DISK_TIME_BETWEEN_ATTEMPTS = 0.5


[Deploy]
; Specify the list of built-in modules for VEX.
; These modules will not be searched for when copying your source code to the sd card
VEX_BUILTIN_MODULES = micropython, uasyncio.event, urandom, _thread, motorgroup, uasyncio.funcs, ure, _uasyncio, python_vm_init, uasyncio.lock, uselect, builtins, smartdrive, uasyncio.stream, ustruct, cmath, sys, ubinascii, utime, drivetrain, uarray, ucollections, utimeq, gc, uasyncio, uio, vex, math, uasyncio.core, ujson, vexdev, VEXLib

; \.svg$ matches ".svg" at the end of the string.
; ~$ matches a tilde "~" at the end of the string.
; ^~ matches a tilde "~" at the beginning of the string.
; The | in the pattern acts as a logical OR, so it will match if any of the conditions are met.
DEPLOY_EXCLUDE_REGEX = r'\.svg$|\.pyc$|~$|^~'
