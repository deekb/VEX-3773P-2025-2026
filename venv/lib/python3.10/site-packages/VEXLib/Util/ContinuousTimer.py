import utime
from VEXLib.Units import Units

MAX_TIMER_VALUE = (2**31) // 2
continuous_time_us = 0
prev_timer_value_us = 0

def raw_time_us():
    """ Function to get the current timer value. """
    # This should return the current timer value
    return utime.ticks_us()

def time():
    global continuous_time_us, prev_timer_value_us

    current_timer_value = raw_time_us()

    if current_timer_value < prev_timer_value_us:
        # Timer rolled over, so account for the wraparound
        delta = (MAX_TIMER_VALUE - prev_timer_value_us) + current_timer_value
        print("Timer wraparound: Compensating using continuous timer...")
    else:
        # No wraparound, normal time progression
        delta = current_timer_value - prev_timer_value_us

    # Update the continuous time with the delta
    continuous_time_us += delta
    prev_timer_value_us = current_timer_value

    return Units.microseconds_to_seconds(continuous_time_us)

def time_ms():
    global continuous_time_us, prev_timer_value_us

    current_timer_value = raw_time_us()

    if current_timer_value < prev_timer_value_us:
        # Timer rolled over, so account for the wraparound
        delta = (MAX_TIMER_VALUE - prev_timer_value_us) + current_timer_value
        print("Timer wraparound: Compensating using continuous timer...")
    else:
        # No wraparound, normal time progression
        delta = current_timer_value - prev_timer_value_us

    # Update the continuous time with the delta
    continuous_time_us += delta
    prev_timer_value_us = current_timer_value

    return Units.microseconds_to_milliseconds(continuous_time_us)

def sleep(time_seconds):
    utime.sleep(time_seconds)