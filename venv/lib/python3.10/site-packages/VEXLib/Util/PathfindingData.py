import math
import random
from VEXLib.Algorithms.DijkstraPathfinding import PathfindingEnvironment


class PathfindingData:
    def __init__(self, size):
        self.size = size
        self.open_heap = [random.choice([random.randint(0, 1)]) for _ in range(self.size[0] * self.size[1])]

    def display_list_as_map(self, _list, binary=False, padding=3):
        for row in range(self.size[0]):
            for col in range(self.size[1]):
                value = _list[row + col * self.size[0]]
                if math.isinf(value):
                    print("∞".ljust(padding), end="")
                elif binary and value in {0, 1}:
                    if value == 0:
                        print("□".ljust(padding), end="")
                    elif value == 1:
                        print("■".ljust(padding), end="")

                else:
                    print(str(value).ljust(padding), end="")
            print()

    def dump_open_heap(self):
        self.display_list_as_map(self.open_heap, binary=True, padding=3)


accessible_tiles_file_object = open("/home/derek/PycharmProjects/VEXlib/deploy/obstacles.bin", "r")
valid_moves = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]

pathfinding_environment = PathfindingEnvironment()
pathfinding_environment.load_from_file(accessible_tiles_file_object)

print(pathfinding_environment.obstacle_list)

pathfinding = PathfindingData((pathfinding_environment.width, pathfinding_environment.width))
pathfinding.open_heap = [1 if pathfinding_environment.get_at(x, y) else 0 for x in range(pathfinding_environment.width) for y in range(pathfinding_environment.width)]

pathfinding.dump_open_heap()
