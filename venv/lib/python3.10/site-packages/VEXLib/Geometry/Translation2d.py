from VEXLib.Geometry.Translation1d import Translation1d, Distance
import VEXLib.Math.MathUtil as MathUtil


class Translation2d:
    """Represents a 2D translation."""

    def __init__(self, translation_x=Translation1d(0), translation_y=Translation1d(0)):
        """Initialize the Translation2d object with x and y coordinates.

        **Do not instantiate this class directly unless you are creating it with two Translation1d (aliased "Distance") objects,
        use the from_meters, from_centimeters, from_inches, or from_feet class methods**

        Args:
            translation_x (Translation1d): The x translation. Defaults to Translation1d(0).
            translation_y (Translation1d): The y translation. Defaults to Translation1d(0).
        """
        assert isinstance(translation_x, Translation1d), "To instantiate this class directly you must pass it two Translation1d (Distance) objects, if you wanted to create a new Translation2d from x, y coordinates as floats please use the  from_meters, from_centimeters, from_inches, or from_feet class methods"
        assert isinstance(translation_y, Translation1d), "To instantiate this class directly you must pass it two Translation1d (Distance) objects, if you wanted to create a new Translation2d from x, y coordinates as floats please use the  from_meters, from_centimeters, from_inches, or from_feet class methods"
        self.x_component = translation_x
        self.y_component = translation_y

    def __add__(self, other):
        """Add two Translation2d objects.

        Args:
            other (Translation2d): The other Translation2d object to add.

        Returns:
            Translation2d: A new Translation2d object with the summed coordinates.
        """
        return Translation2d(self.x_component + other.x_component, self.y_component + other.y_component)

    def __sub__(self, other):
        """Subtract two Translation2d objects.

        Args:
            other (Translation2d): The other Translation2d object to subtract.

        Returns:
            Translation2d: A new Translation2d object with the subtracted coordinates.
        """
        return Translation2d(self.x_component - other.x_component, self.y_component - other.y_component)

    def __eq__(self, other):
        """Check if two Translation2d objects are equal.

        Args:
            other (Translation2d): The other Translation2d object to compare.

        Returns:
            bool: True if the x and y coordinates are equal, False otherwise.
        """
        return self.x_component == other.x_component and self.y_component == other.y_component

    def __mul__(self, scalar):
        """Multiply Translation2d by a scalar.

        Args:
            scalar (float): The scalar to multiply with.

        Returns:
            Translation2d: A new Translation2d object with the scaled coordinates.
        """
        return Translation2d(self.x_component * scalar, self.y_component * scalar)

    def __str__(self):
        """Return the string representation of Translation2d.

        Returns:
            str: The string representation of the x and y coordinates.
        """
        return "(" + str(self.x_component) + ", " + str(self.y_component) + ")"

    def __repr__(self):
        return self.__str__()

    @classmethod
    def from_meters(cls, x_meters, y_meters):
        """Create a Translation2d object from meters.

        Args:
            x_meters (float): The x coordinate in meters.
            y_meters (float): The y coordinate in meters.

        Returns:
            Translation2d: A new Translation2d object with the x and y coordinates in meters.
        """
        return cls(Translation1d.from_meters(x_meters), Translation1d.from_meters(y_meters))

    @classmethod
    def from_centimeters(cls, x_centimeters, y_centimeters):
        """Create a Translation2d object from centimeters.

        Args:
            x_centimeters (float): The x coordinate in centimeters.
            y_centimeters (float): The y coordinate in centimeters.

        Returns:
            Translation2d: A new Translation2d object with the x and y coordinates converted to meters.
        """
        return cls(Translation1d.from_centimeters(x_centimeters), Translation1d.from_centimeters(y_centimeters))

    @classmethod
    def from_inches(cls, x_inches, y_inches):
        """Create a Translation2d object from inches.

        Args:
            x_inches (float): The x coordinate in inches.
            y_inches (float): The y coordinate in inches.

        Returns:
            Translation2d: A new Translation2d object with the x and y coordinates converted to meters.
        """
        return cls(Translation1d.from_inches(x_inches), Translation1d.from_inches(y_inches))

    @classmethod
    def from_feet(cls, x_feet, y_feet):
        """Create a Translation2d object from feet.

        Args:
            x_feet (float): The x coordinate in feet.
            y_feet (float): The y coordinate in feet.

        Returns:
            Translation2d: A new Translation2d object with the x and y coordinates converted to meters.
        """
        return cls(Translation1d.from_feet(x_feet), Translation1d.from_feet(y_feet))

    def to_meters(self):
        """Convert the x and y coordinates to meters.

        Returns:
            tuple[float, float]: A tuple containing the x and y coordinates in meters.
        """
        return self.x_component.to_meters(), self.y_component.to_meters()

    def to_centimeters(self):
        """Convert the x and y coordinates to centimeters.

        Returns:
            tuple[float, float]: A tuple containing the x and y coordinates in centimeters.
        """
        return self.x_component.to_centimeters(), self.y_component.to_centimeters()

    def to_inches(self):
        """Convert the x and y coordinates to inches.

        Returns:
            tuple[float, float]: A tuple containing the x and y coordinates in inches.
        """
        return self.x_component.to_inches(), self.y_component.to_inches()

    def distance(self, other):
        """Calculate the cartesian distance between this and another translation.

        Args:
            other (Translatio2d): The other translation.

        Returns:
            Distance: The distance between the two translation.
        """
        return Distance.from_meters(MathUtil.distance(self.to_meters(), other.to_meters()))
