import math
from typing import List
from dataclasses import dataclass
import numpy as np


class Translation2d:
    x: float = 0.0
    y: float = 0.0

    def __init__(self, vector: np.ndarray):
        self.x = vector[0]
        self.y = vector[1]

    def distance(self, other: 'Translation2d') -> float:
        return math.hypot(other.x - self.x, other.y - self.y)

    def norm(self) -> float:
        return math.hypot(self.x, self.y)

    def __eq__(self, other: 'Translation2d') -> bool:
        return math.isclose(self.x, other.x, abs_tol=1E-9) and \
               math.isclose(self.y, other.y, abs_tol=1E-9)

    def nearest(self, translations: List['Translation2d']) -> 'Translation2d':
        return min(translations, key=lambda trans: self.distance(trans))

    @staticmethod
    def from_json(json_data):
        return Translation2d((json_data['x'], json_data['y']))

    def to_json(self):
        return {'x': self.x, 'y': self.y}


# Example usage:
if __name__ == "__main__":
    # Create instances of Translation2d as needed
    translation1 = Translation2d(np.array([1.0, 2.0]))
    translation2 = Translation2d(np.array([3.0, 4.0]))

    # Perform operations
    distance = translation1.distance(translation2)
    norm = translation1.norm()
    equality_check = translation1 == translation2
    nearest_translation = translation1.nearest([translation2])

    # Output results
    print("Distance:", distance)
    print("Norm:", norm)
    print("Equality Check:", equality_check)
    print("Nearest Translation:", nearest_translation)
