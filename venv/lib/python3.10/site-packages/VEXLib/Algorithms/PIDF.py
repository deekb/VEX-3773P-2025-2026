from ..Algorithms.PID import PIDController

class PIDFController(PIDController):
    """
    A PID controller with a feedforward term.
    """

    def __init__(
        self,
        kp: float = 1.0,
        ki: float = 0.0,
        kd: float = 0.0,
        kf: float = 0.0,  # New feedforward term
        t: float = 0.05,
        integral_limit: float = 1.0,
    ):
        """
        Initializes a PIDFController instance.

        Args:
            kp: Kp value for the PID.
            ki: Ki value for the PID.
            kd: Kd value for the PID.
            kf: Kf value for the feedforward.
            t: Minimum time between update calls. All calls made before this amount of time has passed since the last calculation will be ignored.
            integral_limit: The maximum absolute value for the integral term to prevent windup.
            fade_time: The time over which the integral term fades in after a setpoint change.
        """
        # Call the constructor of the base class (PIDController)
        super().__init__(kp, ki, kd, t, integral_limit)
        # Additional initialization for feedforward term
        self._kf = kf

    @property
    def kf(self) -> float:
        """
        Getter for the Kf value of the PIDF controller.
        :return: The Kf value.
        """
        return self._kf

    @kf.setter
    def kf(self, value: float):
        """
        Setter for the Kf value of the PIDF controller.
        :param value: The new Kf value.
        """
        self._kf = value

    def update(self, current_value: float) -> float:
        """
        Update the PIDF controller state with the most recent current value and calculate the control output.

        Args:
            current_value: The current measurement or feedback value

        Returns:
            The calculated control output.
        """
        # Call the update method of the base class (PIDController)
        pid_output = super().update(current_value)
        # Calculate the feedforward component
        feedforward_output = self._kf * self._target_value
        # Combine PID and feedforward outputs
        total_output = pid_output + feedforward_output
        return total_output
