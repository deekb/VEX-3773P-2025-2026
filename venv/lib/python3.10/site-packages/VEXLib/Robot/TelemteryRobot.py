from VEXLib.Network.Telemetry import Telemetry
from VEXLib.Robot.TickBasedRobot import TickBasedRobot
from vex import Motor, Brain


class TelemetryRobot(TickBasedRobot):
    def __init__(self, brain: Brain):
        super().__init__(brain)
        self.telemetry = Telemetry()
        self.telemetry_objects = []

    def tick_telemetry(self):

        self.telemetry.update()

    def register_telemetry(self):
        objects = self.__dict__
        print(objects.items())
        for name, _object in objects.items():
            if name.startswith("_") or callable(_object):
                # Ignore callables and hidden objects
                continue
            # if isinstance(_object, Motor):
            #     self.telemetry.add_entry(Telemetry.TelemetryMotorEntry(_object))
            # if isinstance(_object, Motor):
            #     motor_port = str(_object)[6:8]
            #     print("Discovered motor: " + str(_object) + " on port " + motor_port)
            #     self.telemetry_objects.append(MotorEntry(_object, "Motor " + motor_port))
            # else:
            print("Object: " + str(_object) + " is of type: " + str(type(_object)))

