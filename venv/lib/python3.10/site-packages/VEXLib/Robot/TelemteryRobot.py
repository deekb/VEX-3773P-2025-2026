from VEXLib.Network.Telemetry import Telemetry, MotorEntry
from VEXLib.Robot.TickBasedRobot import TickBasedRobot
from vex import Motor


class TelemetryRobot(TickBasedRobot):
    def __init__(self, brain):
        super().__init__(brain)
        self.telemetry = Telemetry()

    def tick_telemetry(self):
        self.telemetry.update()

    def register_telemetry(self):
        objects = self.__dict__
        print(objects.items())
        for name, _object in objects.items():
            if name.startswith("_") or callable(_object):
                # Ignore callables and hidden objects
                continue
            if isinstance(_object, Motor):
                self.telemetry.register_entry(MotorEntry(_object, "motor " + name))
                motor_port = str(_object)[6:8]
                print("Discovered motor: " + name + " on port " + motor_port)
            else:
                print("Object: " + name + " is of type: " + str(type(_object)))
