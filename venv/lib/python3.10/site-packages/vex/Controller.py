class ControllerButton:
    def __init__(self):
        pass

    @staticmethod
    def pressed(*args) -> bool:
        pass

    @staticmethod
    def pressing() -> bool:
        pass


class Controller:
    def __init__(self, port):
        self.port = port
        pass

    class buttonL1(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonL2(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonR1(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonR2(ControllerButton):
        def __init__(self):
            super().__init__()

    class screen:
        @staticmethod
        def print(text):
            pass

        @staticmethod
        def set_cursor(row, column):
            pass

        @staticmethod
        def next_row():
            pass

        @staticmethod
        def clear_screen():
            pass

        @staticmethod
        def clear_row(row=-1):
            pass

        @staticmethod
        def draw_pixel(x, y):
            pass

        @staticmethod
        def draw_line(start_x, start_y, end_x, end_y):
            pass

        @staticmethod
        def draw_rectangle(x, y, width, height):
            pass

        @staticmethod
        def draw_circle(x, y, radius):
            pass

        @staticmethod
        def set_font(font_type):
            pass

        @staticmethod
        def set_pen_width(pen_width):
            pass

        @staticmethod
        def set_pen_color(color):
            pass

        @staticmethod
        def set_fill_color(color):
            pass

        @staticmethod
        def pressed(callback):
            pass

        @staticmethod
        def released(callback):
            pass

        @staticmethod
        def row():
            return 20

        @staticmethod
        def column():
            return 80

        @staticmethod
        def pressing():
            return False

        @staticmethod
        def x_position():
            return 0

        @staticmethod
        def y_position():
            return 0

        @classmethod
        def draw_image_from_file(cls, *args):
            pass

    class buttonLeft(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonRight(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonA(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonB(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonX(ControllerButton):
        def __init__(self):
            super().__init__()

    class buttonY(ControllerButton):
        def __init__(self):
            super().__init__()

    @staticmethod
    def rumble(pattern="-"):
        pass

    class axis1:
        @staticmethod
        def position():
            return 0

    class axis2:
        @staticmethod
        def position():
            return 0

    class axis3:
        @staticmethod
        def position():
            return 0

    class axis4:
        @staticmethod
        def position():
            return 0
