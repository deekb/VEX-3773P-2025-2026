import time

from .Brain import Brain
from .Controller import Controller
from .Devices import Distance, Inertial, Optical
from .Motor import Motor, MotorGroup
from .Constants import (BRAKE,
                        COAST,
                        Color,
                        DEGREES,
                        FontType,
                        FORWARD,
                        GearSetting,
                        HOLD,
                        MM,
                        MSEC,
                        PARTNER,
                        PERCENT,
                        Ports,
                        PRIMARY,
                        REVERSE,
                        RPM,
                        SECONDS,
                        VOLT)


class Thread:
    def __init__(self, function):
        raise NotImplemented

    def stop(self):
        raise NotImplemented


class Competition:
    def __init__(self, driver_control_function, autonomous_function):
        pass

    @staticmethod
    def is_enabled() -> bool:
        return False

    @staticmethod
    def is_autonomous() -> bool:
        return False

    @staticmethod
    def is_driver_control() -> bool:
        return False

    @staticmethod
    def is_field_control() -> bool:
        return False

    @staticmethod
    def is_competition_switch() -> bool:
        return False


class DigitalOut:
    def __init__(self, port):
        pass

    def set(self, state: bool):
        pass


def wait(amount, unit=MSEC):
    if unit == MSEC:
        time.sleep(amount / 1000)
        return
    time.sleep(amount)
